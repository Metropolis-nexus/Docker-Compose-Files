services:
  postgres:
    container_name: postgres
    image: ghcr.io/polarix-containers/postgres:18
    restart: unless-stopped
    volumes:
      - ./postgres:/var/lib/postgresql/18/docker:Z
      - ./postgres_dump:/dump:Z
    networks:
      - postgres
    env_file:
      - postgres.env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "authentik"]
      interval: 15s
      timeout: 5s
    user: "200012:200012"
    read_only: true
    tmpfs:
      - /var/run/postgresql:size=50M,mode=0770,uid=200012,gid=200012,noexec,nosuid,nodev
    security_opt:
      - "no-new-privileges=true"
    cap_drop:
      - ALL

  server:
    container_name: server
    image: ghcr.io/polarix-containers/authentik:2025.10.0
    restart: unless-stopped
    command: server
    volumes:
      - ./authentik/media:/media:z
      - ./authentik/custom-templates:/templates:z
    ports:
      - "9000:9000/tcp"
      - "9443:9443/tcp"
    networks:
      - authentik
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - authentik.env
    user: "200001:200001"
    read_only: true
    security_opt:
      - "no-new-privileges=true"
    cap_drop:
      - ALL

  worker:
    container_name: worker
    image: ghcr.io/polarix-containers/authentik:2025.10.0
    restart: unless-stopped
    command: worker
    volumes:
      - ./authentik/media:/media:z
      - ./authentik/certs:/certs:Z
      - ./authentik/custom-templates:/templates:z
    networks:
      - authentik
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - authentik.env
    user: "200001:200001"
    read_only: true
    security_opt:
      - "no-new-privileges=true"
    cap_drop:
      - ALL

networks:
  authentik:
  postgres:
    internal: true